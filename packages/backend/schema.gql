# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input CreateTicket {
  description: String!
  product: TicketType!
}

type FieldError {
  field: String
  message: String!
}

type Mutation {
  """Deletes a ticket"""
  deleteTicket(ticketId: String!): TicketResponse!

  """Signs a user in"""
  login(options: UserLoginInput!): UserResponse!

  """Creates a new User"""
  register(options: UserRegInput!): UserResponse!

  """Creates a ticket"""
  setTicket(ticket: CreateTicket!): TicketResponse!

  """Creates a note for the given ticket"""
  setTicketNote(note: String!, ticketId: String!): TicketResponse!

  """Updates a ticket"""
  updateTicket(ticket: UpdateTicket!): TicketResponse!
}

type Note {
  createdBy: User!
  noteText: String!
}

type Query {
  """Returns the roles assigned to the currently logged user"""
  getUserRoles: [Role!]!

  """Returns the currently logged user"""
  me: User!

  """Returns the Ticket with the given Id"""
  ticket(ticketId: String!): TicketResponse!

  """Returns all tickets in the collection. Admin only"""
  tickets: TicketsResponse!

  """Returns the tickets that the currently logged user has submitted"""
  userTickets: TicketsResponse!
}

"""The user Role"""
enum Role {
  Admin
  User
}

type Ticket {
  _id: ID!
  description: String!
  notes: [Note!]
  product: TicketType!
  status: TicketStatus!
  userDoc: User!
}

type TicketResponse {
  errors: [FieldError!]
  success: Boolean!
  ticket: Ticket
}

"""The status of the ticket"""
enum TicketStatus {
  Closed
  Open
  Submitted
}

"""The type of ticket"""
enum TicketType {
  Engine
  FrontWing
  FuelPump
  RearWing
  Tires
}

type TicketsResponse {
  errors: [FieldError!]
  success: Boolean!
  tickets: [Ticket!]
}

input UpdateTicket {
  description: String
  id: String!
  product: TicketType
  status: TicketStatus
}

type User {
  _id: ID!
  email: String!
  roles: [Role!]!
  token: String
  username: String!
}

input UserLoginInput {
  email: String!
  password: String!
}

input UserRegInput {
  email: String!
  password: String!
  roles: [Role!]
  username: String!
}

type UserResponse {
  errors: [FieldError!]
  user: User
}
